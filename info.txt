TO DO:

security: only allow messages from ids sent by server

make rulesets:
- letters must be rearranged

name assignment - click your own name (tooltip?)

improved feedback messages

implement turns

implement automatic letter adding

timer after final letter is flipped

green light for activity



NOTES:

favicons generated here:
https://favicon.io/favicon-generator/?t=%F0%9F%84%B0&ff=Leckerli+One&fs=110&fc=%23005&b=rounded&bc=%23FFDE34

to run on Windows:
set FLASK_APP=app.py
flask run

October 2020 Charges:
 + $3       static IP
 + $3.96    Micro Instance with burstable CPU Americas
 = $6.96    Total

could save money with dynamic IP and dynamic DNS

after enabling SSL, had to add following to nginx.conf (inside "location /socket.io"):
    proxy_set_header Origin "";
    


APP STRUCTURE:

 - intro screen:
    - description of rules
    - (FUTURE) list of rooms with players in each (click to join)
        - each room has unique url at /room/<id>
    + new room button (optionally enter player name)

 - room:
    - for each player:
        - player name
        - words
    - letter pool
    - your words
    - last play description or attempted play feedback (on timeout?)
    - text entry field



ACTIONS:

 - try to play a word:
    - send word to server
    - if word is valid:
        - server sends updated word lists + pool + "x played WORD by stealing y" message to all clients in room 
    - if word is not valid:
        - server sends reason to originator
 - change your name:
    - update name display locally
    - send 'addname' message to server
        - server associates id with name
        - server sends update to all clients in room (or maybe to all rooms with this user?)


SOCKET ENDPOINTS:

from client

 - update: (roomname)
    - requests a full update of room state for this client

 - submit: (roomname, userid, word)
    - submits a word to claim

 - adduser: ([userid],[username])
    - if userid is not defined, generate a new one. if it is defined, save it on the server


from server

 - update: (poolstring, blockwords, scores, names, room_message)
    - sends updated room state to all clients in room

 - userid: (userid)
    - communicates a newly assigned userid to the client

 - wordmess: (message)
    - sends a message to display on page for particular client

test
